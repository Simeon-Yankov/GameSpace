// <auto-generated />
using System;
using GameSpace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameSpace.Data.Migrations
{
    [DbContext(typeof(GameSpaceDbContext))]
    [Migration("20210814105403_NewTicketPrizeColumnInTeamsTournamentTable")]
    partial class NewTicketPrizeColumnInTeamsTournamentTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameSpace.Data.Models.Appearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Banner")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Appearances");
                });

            modelBuilder.Entity("GameSpace.Data.Models.BracketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BracketTypes");
                });

            modelBuilder.Entity("GameSpace.Data.Models.GameAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RankId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("SummonerName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("GameAccounts");
                });

            modelBuilder.Entity("GameSpace.Data.Models.HostTournaments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("id");

                    b.ToTable("HostsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlueSideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RedSideId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsTournamentId")
                        .HasColumnType("int");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamsTournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("GameSpace.Data.Models.MaximumTeamsFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MaximumTeamsFormats");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Mode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GameSpace.Data.Models.PendingTeamRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PendingTeamsRequests");
                });

            modelBuilder.Entity("GameSpace.Data.Models.ProfileInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Biography")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("SocialNetworkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppearanceId")
                        .IsUnique()
                        .HasFilter("[AppearanceId] IS NOT NULL");

                    b.HasIndex("SocialNetworkId")
                        .IsUnique()
                        .HasFilter("[SocialNetworkId] IS NOT NULL");

                    b.ToTable("ProfilesInfo");
                });

            modelBuilder.Entity("GameSpace.Data.Models.ProfileInfoLanguage", b =>
                {
                    b.Property<string>("ProfileInfoId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("ProfileInfoId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ProfileInfosLanguages");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GameSpace.Data.Models.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitchUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppearanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("SocialNetworkId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppearanceId")
                        .IsUnique()
                        .HasFilter("[AppearanceId] IS NOT NULL");

                    b.HasIndex("SocialNetworkId")
                        .IsUnique()
                        .HasFilter("[SocialNetworkId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamSizes");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamsTournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BracketTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("BronzeMatch")
                        .HasColumnType("bit");

                    b.Property<int>("CheckInPeriod")
                        .HasColumnType("int");

                    b.Property<int>("GoToGamePeriod")
                        .HasColumnType("int");

                    b.Property<int>("HosterId")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MaximumTeamsId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumTeams")
                        .HasColumnType("int");

                    b.Property<int>("ModeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("PrizePool")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TeamSizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrize")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("BracketTypeId");

                    b.HasIndex("HosterId");

                    b.HasIndex("MapId");

                    b.HasIndex("MaximumTeamsId");

                    b.HasIndex("ModeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TeamSizeId");

                    b.ToTable("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamsTournamentTeam", b =>
                {
                    b.Property<int>("TeamsTournamentId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminated")
                        .HasColumnType("bit");

                    b.HasKey("TeamsTournamentId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsTournamentsTeams");
                });

            modelBuilder.Entity("GameSpace.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("HostedTournamentsId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileInfoId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("HostedTournamentsId")
                        .IsUnique()
                        .HasFilter("[HostedTournamentsId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileInfoId")
                        .IsUnique()
                        .HasFilter("[ProfileInfoId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GameSpace.Data.Models.UserTeam", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UsersTeams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameSpace.Data.Models.GameAccount", b =>
                {
                    b.HasOne("GameSpace.Data.Models.Rank", "Rank")
                        .WithMany("GameAccounts")
                        .HasForeignKey("RankId");

                    b.HasOne("GameSpace.Data.Models.Region", "Region")
                        .WithMany("GameAccounts")
                        .HasForeignKey("RegionId");

                    b.HasOne("GameSpace.Data.Models.User", "User")
                        .WithMany("GameAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rank");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Match", b =>
                {
                    b.HasOne("GameSpace.Data.Models.TeamsTournament", "TeamsTournament")
                        .WithMany("Matches")
                        .HasForeignKey("TeamsTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamsTournament");
                });

            modelBuilder.Entity("GameSpace.Data.Models.ProfileInfo", b =>
                {
                    b.HasOne("GameSpace.Data.Models.Appearance", "Appearance")
                        .WithOne("ProfileInfo")
                        .HasForeignKey("GameSpace.Data.Models.ProfileInfo", "AppearanceId");

                    b.HasOne("GameSpace.Data.Models.SocialNetwork", "SocialNetwork")
                        .WithOne("ProfileInfo")
                        .HasForeignKey("GameSpace.Data.Models.ProfileInfo", "SocialNetworkId");

                    b.Navigation("Appearance");

                    b.Navigation("SocialNetwork");
                });

            modelBuilder.Entity("GameSpace.Data.Models.ProfileInfoLanguage", b =>
                {
                    b.HasOne("GameSpace.Data.Models.Language", "Language")
                        .WithMany("ProfilesInfo")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.ProfileInfo", "ProfileInfo")
                        .WithMany("Languages")
                        .HasForeignKey("ProfileInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProfileInfo");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Team", b =>
                {
                    b.HasOne("GameSpace.Data.Models.Appearance", "Appearance")
                        .WithOne("Team")
                        .HasForeignKey("GameSpace.Data.Models.Team", "AppearanceId");

                    b.HasOne("GameSpace.Data.Models.SocialNetwork", "SocialNetwork")
                        .WithOne("Team")
                        .HasForeignKey("GameSpace.Data.Models.Team", "SocialNetworkId");

                    b.Navigation("Appearance");

                    b.Navigation("SocialNetwork");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamsTournament", b =>
                {
                    b.HasOne("GameSpace.Data.Models.BracketType", "BracketType")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("BracketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.HostTournaments", "Hoster")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("HosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.Map", "Map")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.MaximumTeamsFormat", "MaximumTeamsFormat")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("MaximumTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.Mode", "Mode")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.Region", "Region")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.TeamSize", "TeamSize")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("TeamSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BracketType");

                    b.Navigation("Hoster");

                    b.Navigation("Map");

                    b.Navigation("MaximumTeamsFormat");

                    b.Navigation("Mode");

                    b.Navigation("Region");

                    b.Navigation("TeamSize");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamsTournamentTeam", b =>
                {
                    b.HasOne("GameSpace.Data.Models.Team", "Team")
                        .WithMany("Tournaments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.TeamsTournament", "TeamsTournament")
                        .WithMany("RegisteredTeams")
                        .HasForeignKey("TeamsTournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("TeamsTournament");
                });

            modelBuilder.Entity("GameSpace.Data.Models.User", b =>
                {
                    b.HasOne("GameSpace.Data.Models.HostTournaments", "HostTournaments")
                        .WithOne("User")
                        .HasForeignKey("GameSpace.Data.Models.User", "HostedTournamentsId");

                    b.HasOne("GameSpace.Data.Models.ProfileInfo", "ProfileInfo")
                        .WithOne("User")
                        .HasForeignKey("GameSpace.Data.Models.User", "ProfileInfoId");

                    b.HasOne("GameSpace.Data.Models.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId");

                    b.Navigation("HostTournaments");

                    b.Navigation("ProfileInfo");
                });

            modelBuilder.Entity("GameSpace.Data.Models.UserTeam", b =>
                {
                    b.HasOne("GameSpace.Data.Models.Team", "Team")
                        .WithMany("Mombers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameSpace.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameSpace.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSpace.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameSpace.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSpace.Data.Models.Appearance", b =>
                {
                    b.Navigation("ProfileInfo");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GameSpace.Data.Models.BracketType", b =>
                {
                    b.Navigation("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.HostTournaments", b =>
                {
                    b.Navigation("TeamsTournaments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Language", b =>
                {
                    b.Navigation("ProfilesInfo");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Map", b =>
                {
                    b.Navigation("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.MaximumTeamsFormat", b =>
                {
                    b.Navigation("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Mode", b =>
                {
                    b.Navigation("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.ProfileInfo", b =>
                {
                    b.Navigation("Languages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Rank", b =>
                {
                    b.Navigation("GameAccounts");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Region", b =>
                {
                    b.Navigation("GameAccounts");

                    b.Navigation("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.SocialNetwork", b =>
                {
                    b.Navigation("ProfileInfo");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GameSpace.Data.Models.Team", b =>
                {
                    b.Navigation("Mombers");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamSize", b =>
                {
                    b.Navigation("TeamsTournaments");
                });

            modelBuilder.Entity("GameSpace.Data.Models.TeamsTournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("RegisteredTeams");
                });

            modelBuilder.Entity("GameSpace.Data.Models.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("GameAccounts");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
